# Copyright (c) Meta Platforms, Inc. and affiliates.

name: Build Python from Source

description: Builds Python from source code with configurable options

inputs:
  python-version:
    description: "The version of Python to build: e.g. 3.13.0-rc3"
    required: true
  nogil:
    description: "Build Python without the GIL: true || false"
    required: true

outputs:
  python-path:
    description: The path to the built Python executable
    value: ${{ steps.set-path.outputs.python-path }}

runs:
  using: composite
  steps:
    # Ensure we have MSVC for Windows to build with.
    - name: Setup MSVC on Windows
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    # Install necessary dependencies based on the operating system.
    - name: Install dependencies
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc make libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew install openssl readline sqlite3 xz tcl-tk
          echo "CPPFLAGS=-I$(brew --prefix)/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib" >> $GITHUB_ENV
        elif [ "${{ runner.os }}" = "Windows" ]; then
          choco install --quiet  --no-progress openssl
        fi

    # We do not need to keep building python from source if it is against a tag which is therefore
    # unchanging.
    - name: Cache the entire checkout and build.
      if: "!contains(inputs.python-version, 'alpha')"
      uses: actions/cache/restore@v3
      id: cpython-cache
      with:
        path: cpython
        key: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ inputs.nogil }}
        restore-keys: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ inputs.nogil }}

    # Clone the Python source code from the official repository and checkout the specified version.
    - name: Checkout Python source code
      if: steps.cpython-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        git clone https://github.com/python/cpython.git
        cd cpython
        if [[ ${{ inputs.python-version }} == *"alpha"* ]]; then
          git checkout main
        else
          git checkout ${{ inputs.python-version }}
        fi

    # Configure and build Python based on the OS and the 'nogil' input.
    - name: Configure and build Python
      if: steps.cpython-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Do some output to help debugging if things go wrong/
        pwd
        cd cpython
        pwd
        ls
        # Set up the desired configuration.
        configure_options=""
        if [ "${{ inputs.nogil }}" = "true" ]; then
          configure_options="--disable-gil"  # Add the --disable-gil option if nogil is true.
        fi
        if [ "${{ runner.os }}" = "Linux" ] || [ "${{ runner.os }}" = "macOS" ]; then
          prefix="/usr/local/python-${{ inputs.python-version }}"
        elif [ "${{ runner.os }}" = "Windows" ]; then
          cwd=$(pwd)
          prefix=$(cygpath -w "${cwd}/Python/${{ inputs.python-version }}")
        fi
        # Build it!
        if [ "${{ runner.os }}" != "Windows" ]; then
          ./configure --prefix=$prefix CFLAGS="-O3" CXXFLAGS="-O3" $configure_options
          make -j $(nproc)  # Use all available processors to speed up the build.
        else
          # Use the build script provided for Windows in the Python source.
          set CFLAGS=/Ox
          set CXXFLAGS=/Ox
          ./PCbuild/build.bat -e $configure_options
        fi

    # Update/create the cache. We force this so even if later parts of the workflow fail
    # we do not need to keep rebuilding a headlthy vesion of the python system.
    - name: Cache Python build
      if: "!contains(inputs.python-version, 'alpha')"
      uses: actions/cache/save@v3
      with:
        path: cpython
        key: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ inputs.nogil }}

    # Install the built Python version.
    - name: Install Python
      shell: bash
      run: |
        cd cpython
        if [ "${{ runner.os }}" != "Windows" ]; then
          sudo make install
        fi

    # Make sure we use our version of python.
    - name: Set LOCAL_PYTHON
      shell: bash
      run: |
        if [ "${{ runner.os }}" != "Windows" ]; then
          echo "LOCAL_PYTHON=/usr/local/python-${{ inputs.python-version }}/bin/python3" >> $GITHUB_ENV
        else
          # Find the Python executable and set LOCAL_PYTHON
          cd cpython
          cwd=$(pwd)
          LOCAL_PYTHON=$(find "${cwd}/PCbuild/amd64/" -name "python3*.exe")
          echo "LOCAL_PYTHON=${LOCAL_PYTHON}" >> $GITHUB_ENV
        fi

    # Ensure python is in the path and log out the version to help with debug.
    - name: Verify Python Installation
      run: |
        $LOCAL_PYTHON --version
      shell: bash

# Example of how to use this action in a workflow:
#
# This example shows how to use the Build Python from Source action in a GitHub workflow.
# Replace 'your-workflow.yml' with the name of your actual workflow file.
#
# Note: if the python version has alpha in it then we clone the tip of main and do not cache.
#
# .github/workflows/your-workflow.yml
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Build Python
#       uses: ./.github/actions/build-python-from-source
#       with:
#         python-version: '3.9.1'
#         nogil: true
